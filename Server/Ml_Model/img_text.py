# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qX9O4YcGNQqF-OQEMtjSX_v4RW75SjgA
"""

# !pip install transformers

from transformers import VisionEncoderDecoderModel,ViTFeatureExtractor,AutoTokenizer
import torch
from  PIL import Image

model=VisionEncoderDecoderModel.from_pretrained('nlpconnect/vit-gpt2-image-captioning')

feature_extractor=ViTFeatureExtractor.from_pretrained('nlpconnect/vit-gpt2-image-captioning')
tokenizer=AutoTokenizer.from_pretrained("nlpconnect/vit-gpt2-image-captioning")

device=torch.device("cuda" if  torch.cuda.is_available() else "cpu")
model.to(device)

max_length = 4
num_beams = 3
gen_kwargs = {"max_length": max_length, "num_beams": num_beams}

def predict_step(image_paths):
    images = []
    for image_path in image_paths:
        i_image = Image.open(image_path)
        if i_image.mode != "RGB":
            i_image = i_image.convert(mode="RGB")

        images.append(i_image)


    pixel_values = feature_extractor(images=images, return_tensors="pt").pixel_values
    pixel_values = pixel_values.to(device)


    attention_mask = torch.ones_like(pixel_values[:, 0, 0])  # Assumes batch size is 1
    attention_mask = attention_mask.to(device)


    output_ids = model.generate(pixel_values, attention_mask=attention_mask, **gen_kwargs)


    preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)
    preds = [pred.strip() for pred in preds]

    return preds

y=predict_step(['Basketball.png'])
print(y)

words=y[0].split()

x=input()
t=0
print(x.split())
print (words)
for i in x.split():
  if i in words:
    t=1
if t==1:
  print('correct')
else:
  print('wrong')

"""Another model

"""